O <- Obs_poly(df=df,pol_df=pol_df)
Odiff <- setalpha(O,0.1,av_dist=2)
df
Q
O
O@df
Odiff <- setalpha(O,0.1,av_dist=2)
pol_df <- rbind(data.frame(id=1,x1=0,x2=0,x3=1,x4=1,y1=0,y2=1,y3=1,y4=0,t=0),
Q
Q
Q
pol_df <- rbind(data.frame(id=1,x1=0,x2=0,x3=1,x4=1,y1=0,y2=1,y3=1,y4=0,t=0),
data.frame(id=2,x1=1,x2=1,x3=2,x4=2,y1=1,y2=2,y3=2,y4=1,t=0)
data.frame(id=3,x1=2,x2=2,x3=3,x4=3,y1=2,y2=3,y3=3,y4=2,t=0))
pol_df <- rbind(data.frame(id=1,x1=0,x2=0,x3=1,x4=1,y1=0,y2=1,y3=1,y4=0,t=0),
data.frame(id=2,x1=1,x2=1,x3=2,x4=2,y1=1,y2=2,y3=2,y4=1,t=0),
data.frame(id=3,x1=2,x2=2,x3=3,x4=3,y1=2,y2=3,y3=3,y4=2,t=0))
pol_df
df <- rbind(data.frame(id=1,x=0.5,y=0.5,z=1,std=1,t=0),
data.frame(id=2,x=1.5,y=1.5,z=1,std=1,t=0),
data.frame(id=3,x=2.5,y=2.5,z=1,std=1,t=0))
df
O <- Obs_poly(df=df,pol_df=pol_df)
plot(O,"z")
df <- rbind(data.frame(id=1,x=0.5,y=0.5,z=1,std=1,t=0),
data.frame(id=2,x=1.5,y=1.5,z=2,std=1,t=0),
data.frame(id=3,x=2.5,y=2.5,z=1.5,std=1,t=0))
O <- Obs_poly(df=df,pol_df=pol_df)
plot(O,"z")
Odiff <- setalpha(O,0.1,av_dist=2)
c
Odiff
Odiff@args$P
document("./pkg/MVST")
document("./pkg/MVST",clean=T)
document("./pkg/MVST",clean=T)
document("./pkg/MVST",clean=T)
document("./pkg/MVST",clean=T)
document("./pkg/MVST",clean=T)
document("./pkg/MVST",clean=T)
dev_help("setalpha")
document("./pkg/MVST",clean=T)
document("./pkg/MVST",clean=T)
document("./pkg/MVST",clean=T)
library(devtools)
source('C:/Users/ggazm/Dropbox/CurrentProjects/PostDoc Bristol/R Code/AIS_ST_Study_postMCMC.R')
c
data(icesat)
icesat_obs <- Obs(df=icesat)
O2 <- split_validation(icesat_obs,100,common=0)
icesat_obs <- Obs(df=icesat)
load_all("./pkg/MVST")
load_all("./pkg/MVST")
library(devtools)
load_all("./pkg/MVST")
data(icesat)
icesat_obs <- Obs(df=icesat)
O2 <- split_validation(icesat_obs,100,common=0.t > 0)
O2 <- split_validation(icesat_obs,100,common=0, t > 0)
t_axis <- 0:6
source('C:/Users/ggazm/Dropbox/CurrentProjects/PostDoc Bristol/R Code/Program_setup.R')
document("./pkg/MVST")
document("./pkg/MVST")
document("./pkg/MVST",clean=T)
source('C:/Users/ggazm/Dropbox/CurrentProjects/PostDoc Bristol/R Code/Program_setup.R')
l = 100
nu = 1
kappa <- kappa_from_l(l,nu)
kappa <- MVST:::kappa_from_l(l,nu)
kappa
kappa = 0.02
nu = 1
kappa <- l_from_kappa(kappa,nu)
kappa <- MVST::l_from_kappa(kappa,nu)
kappa <- MVST:::l_from_kappa(kappa,nu)
kappa
help(seq)
document("./pkg/MVST")
document("./pkg/MVST")
MVST:::my_Matern()
x1 <- matrix(runif(10),5,2)
x2 <- matrix(runif(10),5,2)
x1
x2
dist(x1,x2)
fields::rdist(x1,x2)
rdist(x1,x2)
help(dist)
x1 <- matrix(runif(10),5,2)
x2 <- matrix(runif(10),5,2)
D <- sqrt((x1[,1] - x2[,1])^2 + (x1[,2] - x2[,2])^2)
D
dist(x1[,1])
x1 <- runif(100)
Sigma <- my_Matern(dist(x1))
Sigma
image(Sigma)
Sigma <- my_Matern(as.matrix(dist(x1)))
image(Sigma)
chol(Sigma)
Sigma
x1 <- runif(10)
Sigma <- my_Matern(as.matrix(dist(x1)))
x1 <- runif(10)
Sigma <- my_Matern(as.matrix(dist(x1)))
Sigma
Sigma <- my_Matern(as.matrix(dist(x1)),nu=3/2,var=1,kappa=100)
Sigma
image(Sigma)
document("./pkg/MVST")
t_axis <- 0:6
source('C:/Users/ggazm/Dropbox/CurrentProjects/PostDoc Bristol/R Code/Program_setup.R')
source('C:/Users/ggazm/Dropbox/CurrentProjects/PostDoc Bristol/R Code/Program_setup.R')
library(devtools)
document("./pkg/MVST",clean=T)
t_axis <- 0:6
source('C:/Users/ggazm/Dropbox/CurrentProjects/PostDoc Bristol/R Code/Program_setup.R')
data(icesat)
icesat_obs <- Obs(df=icesat)
expand.grid(c(1,2))
data <- data.frame(x = c(1,1,2,2),y = c(1,2,1,2), z = (1,2,3,4))
data <- data.frame(x = c(1,1,2,2),y = c(1,2,1,2), z = c(1,2,3,4))
expand.grid(seq(0,3,by=0.1),seq(0,3,by=0.1))
si <- as.data.frame(expand.grid(seq(0,3,by=0.1),seq(0,3,by=0.1)))
si
head(si)
names(si) <- c("x","y")
data <- data.frame(x = c(1,1,2,2),y = c(1,2,1,2), z = c(1,2,3,4))
si <- as.data.frame(expand.grid(seq(0,3,by=0.1),seq(0,3,by=0.1)))
names(si) <- c("x","y")
si$z <- RBF_filter(data,si,varname="z")
ggplot(si) + geom_point(aes(x,y,colour=z))
ggplot(data) + geom_point(aes(x,y,colour=z))
si$z <- RBF_filter(data,si,varname="z",smooth_var=1)
ggplot(si) + geom_point(aes(x,y,colour=z))
ggplot(si) + geom_point(aes(x,y,colour=z),size=4)
document("./pkg/MVST",clear=T)
document("./pkg/MVST",clean=T)
library(devtools)
document("./pkg/MVST",clean=T)
dev_example("link")
document("./pkg/MVST",clean=T)
dev_example("link")
traceback()
require(Matrix)
data(icesat)
data(surf_fe)
## First create observation object
icesat_obs <- Obs(df=icesat,
abs_lim = 5,
avr_method = "median",
box_size=100,
name="icesat")
## Now create GMRF defined over some FE basis
Mesh <- initFEbasis(p=surf_fe$p,
t=surf_fe$t,
M=surf_fe$M,
K=surf_fe$K)
mu <- matrix(0,nrow(Mesh),1)
Q <- sparseMatrix(i=1:nrow(surf_fe$p), j = 1:nrow(surf_fe$p), x = 1)
my_GMRF <- GMRF(mu = mu, Q = Q,name="SURF",t_axis = 0:6)
SURF <-GMRF_basis(G = my_GMRF, Basis = Mesh)
L1 <- link(SURF,icesat_obs)
traceback()
load_all("./pkg/MVST")
require(Matrix)
data(icesat)
data(surf_fe)
## First create observation object
icesat_obs <- Obs(df=icesat,
abs_lim = 5,
avr_method = "median",
box_size=100,
name="icesat")
## Now create GMRF defined over some FE basis
Mesh <- initFEbasis(p=surf_fe$p,
t=surf_fe$t,
M=surf_fe$M,
K=surf_fe$K)
mu <- matrix(0,nrow(Mesh),1)
Q <- sparseMatrix(i=1:nrow(surf_fe$p), j = 1:nrow(surf_fe$p), x = 1)
my_GMRF <- GMRF(mu = mu, Q = Q,name="SURF",t_axis = 0:6)
SURF <-GMRF_basis(G = my_GMRF, Basis = Mesh)
L1 <- link(SURF,icesat_obs)
library(devtools)
load_all("./pkg/MVST")
require(Matrix)
data(icesat)
data(surf_fe)
## First create observation object
icesat_obs <- Obs(df=icesat,
abs_lim = 5,
avr_method = "median",
box_size=100,
name="icesat")
## Now create GMRF defined over some FE basis
Mesh <- initFEbasis(p=surf_fe$p,
t=surf_fe$t,
M=surf_fe$M,
K=surf_fe$K)
mu <- matrix(0,nrow(Mesh),1)
Q <- sparseMatrix(i=1:nrow(surf_fe$p), j = 1:nrow(surf_fe$p), x = 1)
my_GMRF <- GMRF(mu = mu, Q = Q,name="SURF",t_axis = 0:6)
SURF <-GMRF_basis(G = my_GMRF, Basis = Mesh)
L1 <- link(SURF,icesat_obs)
traceback()
load_all("./pkg/MVST")
require(Matrix)
data(icesat)
data(surf_fe)
## First create observation object
icesat_obs <- Obs(df=icesat,
abs_lim = 5,
avr_method = "median",
box_size=100,
name="icesat")
## Now create GMRF defined over some FE basis
Mesh <- initFEbasis(p=surf_fe$p,
t=surf_fe$t,
M=surf_fe$M,
K=surf_fe$K)
mu <- matrix(0,nrow(Mesh),1)
Q <- sparseMatrix(i=1:nrow(surf_fe$p), j = 1:nrow(surf_fe$p), x = 1)
my_GMRF <- GMRF(mu = mu, Q = Q,name="SURF",t_axis = 0:6)
SURF <-GMRF_basis(G = my_GMRF, Basis = Mesh)
L1 <- link(SURF,icesat_obs)
source('C:/Users/ggazm/Dropbox/CurrentProjects/PostDoc Bristol/R Code/AIS_ST_Study_postMCMC.R')
### First infer using altimetry
L1 <- link(ICE,ICESAT)
L2 <- link(ICE,ENVISAT)
L3 <- link(ICE,PSEUDO_ICE)
L4 <- link(ICE,GRACE,n_grid = 400,mul_factor=consts$rho_ICE_MT_per_mkm2,mask = "in_land")
L5 <- link(SURF_FIRN,ICESAT)
L6 <- link(SURF_FIRN,ENVISAT)
L7 <- link(SURF_FIRN,PSEUDO_SURF,mul_factor=c(1,0))
L8 <- link(SURF_FIRN,PSEUDO_FIRN,mul_factor=c(0,1))
L9 <- link(SURF_FIRN,GRACE,n_grid = 40,mul_factor=c(1,0),mulfun = rho_cont_land) # mulfun acts like a mask in this case
L10 <- link(GIA,ICESAT)
L11 <- link(GIA,ENVISAT)
L12 <- link(GIA,GPS)
L13 <- link(GIA,GRACE,n_grid = 400,mul_factor=consts$rho_ROCK_MT_per_mkm2)
L14 <- link(ICE,ICESAT_NAP)
L15 <- link(SURF_FIRN,ICESAT_NAP)
L16 <- link(GIA,ICESAT_NAP)
L17 <- link(GIA,GPS2)
load_all("./pkg/MVST")
source('C:/Users/ggazm/Dropbox/CurrentProjects/PostDoc Bristol/R Code/AIS_ST_Study_postMCMC.R')
traceback()
load_all("./pkg/MVST")
source('C:/Users/ggazm/Dropbox/CurrentProjects/PostDoc Bristol/R Code/AIS_ST_Study_postMCMC.R')
document("./pkg/MVST")
document("./pkg/MVST",clean=T)
source('C:/Users/ggazm/Dropbox/CurrentProjects/PostDoc Bristol/R Code/AIS_ST_Study_postMCMC.R')
LinePlotTheme <- function() {
g <- ggplot() + theme(panel.background = element_rect(fill='white', colour='black'),text = element_text(size=20),
panel.grid.major =  element_line(colour = "light gray", size = 0.05),
panel.border  = element_rect(fill=NA, colour='black'),
plot.margin=unit(c(0,0,0,0),"mm"))
return (g)
}
unique_names <- unique(Comb_list$Comb_def$name)
g_all <- list()
for(i in unique_names[sapply(unique_names,function(x) { substring(x,1,3) != "GIA" })]) {
d <- data.frame(t=t_axis+2003,
mean=subset(Comb_list$Comb_def,name==i,select=mean_ICESAT),
std=subset(Comb_list$Comb_def,name==i,select=std_ICESAT))
names(d) <- c("t","mean","std")
g <- Mass_budget_plot2(LinePlotTheme(),d,col="red")
cat(paste("Average Altimetry Only ",i," rate = ",mean(d$mean), " pm ", sqrt(mean(d$std^2)),sep=""),sep="\n")
d <- data.frame(t=t_axis+2003,
mean=subset(Comb_list$Comb_def,name==i,select=mean_All),
std=subset(Comb_list$Comb_def,name==i,select=std_All))
names(d) <- c("t","mean","std")
g <- Mass_budget_plot2(g,d,col="black")
g_all[[i]] <- Mass_budget_plot2(LinePlotTheme(),d,col="black")
g <-  g +  scale_colour_discrete(name  ="Observations",labels=c("IceSat", "All")) +
theme(text = element_text(size=40)) +
xlab("Year") +
ylab("Balance (Gt/yr)")
png(filename=paste0(img_path,"Results_",i,".png"),width=1000,height=1000)
print(g);  dev.off()
cat(paste("Average ",i," rate = ",mean(d$mean), " pm ", sqrt(mean(d$std^2)),sep=""),sep="\n")
}
# 0.28mm per 100GT
library(grid)
unique_names <- unique(Comb_list$Comb_def$name)
g_all <- list()
for(i in unique_names[sapply(unique_names,function(x) { substring(x,1,3) != "GIA" })]) {
d <- data.frame(t=t_axis+2003,
mean=subset(Comb_list$Comb_def,name==i,select=mean_ICESAT),
std=subset(Comb_list$Comb_def,name==i,select=std_ICESAT))
names(d) <- c("t","mean","std")
g <- Mass_budget_plot2(LinePlotTheme(),d,col="red")
cat(paste("Average Altimetry Only ",i," rate = ",mean(d$mean), " pm ", sqrt(mean(d$std^2)),sep=""),sep="\n")
d <- data.frame(t=t_axis+2003,
mean=subset(Comb_list$Comb_def,name==i,select=mean_All),
std=subset(Comb_list$Comb_def,name==i,select=std_All))
names(d) <- c("t","mean","std")
g <- Mass_budget_plot2(g,d,col="black")
g_all[[i]] <- Mass_budget_plot2(LinePlotTheme(),d,col="black")
g <-  g +  scale_colour_discrete(name  ="Observations",labels=c("IceSat", "All")) +
theme(text = element_text(size=40)) +
xlab("Year") +
ylab("Balance (Gt/yr)")
png(filename=paste0(img_path,"Results_",i,".png"),width=1000,height=1000)
print(g);  dev.off()
cat(paste("Average ",i," rate = ",mean(d$mean), " pm ", sqrt(mean(d$std^2)),sep=""),sep="\n")
}
# 0.28mm per 100GT
## Plot GIA Results
Comb_GIA <- subset(Comb_list$Comb_def,substring(Comb_list$Comb_def$name,1,3)=="GIA")
GIA_levels <- substring(Comb_GIA$name[order(as.numeric(substring(Comb_GIA$name,4,6)))],4,6)
Comb_GIA$name2 <- factor(substring(Comb_GIA$name,4,6),levels=GIA_levels)
g <- LinePlotTheme() + geom_crossbar(data=Comb_GIA,aes(x=name2,y = mean_All,ymax=mean_All+std_All,ymin=mean_All-std_All),alpha=0.5,fill="black") +
geom_crossbar(data=Comb_GIA,aes(x=name2,y = mean_All,ymax=mean_All+2*std_All,ymin=mean_All-2*std_All),alpha=0.5,fill="light grey") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ylab("Gt/yr") + xlab("Basin (Rignot, 2011)")
#g <- g + geom_crossbar(data=Comb_GIA,aes(x=name,y = mean_ICESAT,ymax=mean_ICESAT+std_ICESAT,ymin=mean_ICESAT-std_ICESAT),fill="red",alpha=0.7)
IJ05_basins <- plyr::ddply(subset(getDf(Meshes$GIA),basins_rignot11>0),"basins_rignot11",function(df) {
return(data.frame(name=paste0(df$basins_rignot11[1]),tot_mass=sum(df$IJ05_R2 * df$mass_GT_per_year)))} )
g <- g + geom_point(data=IJ05_basins,aes(x=name,y=tot_mass),size=3,colour="red")
png(filename=paste0(img_path,"GIA_compare.png"),width=2000,height=2000,res=300)
print(g);  dev.off()
## Plot RACMO results
RACMO_sub_WAIS <- RACMO_sub_EAIS <- RACMO_sub_AP <- NULL
for (i in t_axis) {
RACMO_sub_WAIS[i+1] <- sum(subset(RACMO,t == i & basins_rignot11 %in% consts$WAIS_basins_rignot11)["GT_per_box"])
RACMO_sub_EAIS[i+1] <- sum(subset(RACMO,t == i & basins_rignot11 %in% consts$EAIS_basins_rignot11)["GT_per_box"])
RACMO_sub_AP[i+1] <- sum(subset(RACMO,t == i & basins_rignot11 %in% consts$AP_basins_rignot11)["GT_per_box"])
}
RACMO_basins <- data.frame(t = 2003 + t_axis, WAIS = RACMO_sub_WAIS,EAIS = RACMO_sub_EAIS, AP = RACMO_sub_AP)
g1 <- g_all$WAIS_SURF_ONLY + geom_point(data=RACMO_basins,aes(x=as.factor(t),y=WAIS),size=4,colour="red") + coord_fixed(ylim=c(-180,180),ratio=0.01) + xlab("") + ylab("Gt/yr")
g2 <- g_all$EAIS_SURF_ONLY + geom_point(data=RACMO_basins,aes(x=as.factor(t),y=EAIS),size=4,colour="red") + coord_fixed(ylim=c(-300,300),ratio=0.01)+ xlab("") + ylab("Gt/yr")
g3 <- g_all$AP_SURF_ONLY + geom_point(data=RACMO_basins,aes(x=as.factor(t),y=AP),size=4,colour="red") + coord_fixed(ylim=c(-70,70),ratio=0.01)+ xlab("year") + ylab("Gt/yr")
png(filename=paste0(img_path,"RACMO_compare_WAIS.png"),width=2000,height=1100,res=300); print(g1);  dev.off()
png(filename=paste0(img_path,"RACMO_compare_EAIS.png"),width=2000,height=1800,res=300); print(g2);  dev.off()
png(filename=paste0(img_path,"RACMO_compare_AP.png"),width=2000,height=700,res=300); print(g3);  dev.off()
## Plot mass budget cumulative Results
IMBIE_AIS <- read.table("data/AIS_Data/imbie_dataset-2012_11_29.csv",header=T,sep=",")
IMBIE_AIS$Cum_GT <- IMBIE_AIS$Cum_GT - IMBIE_AIS$Cum_GT[which(IMBIE_AIS$Year == 2003)]
IMBIE_AIS$Cum_unc_GT <- sqrt(IMBIE_AIS$Cum_unc_GT^2 - IMBIE_AIS$Cum_unc_GT[which(IMBIE_AIS$Year == 2003)]^2)
#IMBIE_AIS$Cum_unc_GT <- IMBIE_AIS$Cum_unc_GT - IMBIE_AIS$Cum_unc_GT[which(IMBIE_AIS$Year == 2003)]
AIS_rates <- subset(Comb_list$Comb_def,name=="AIS",select=c(t,mean_All,std_All))
AIS_rates <- plyr::rbind.fill(data.frame(t=-1,mean_All=0,std_All=0),AIS_rates)
AIS_rates$cum <- cumsum(AIS_rates$mean_All)
AIS_rates$cum_std <- sqrt(cumsum(AIS_rates$std_All^2))
g_IMBIE <- LinePlotTheme() + geom_ribbon(data=subset(IMBIE_AIS,Year >= 2003 & Year <= 2010),aes(x=Year,ymin=Cum_GT-Cum_unc_GT,ymax = Cum_GT+Cum_unc_GT),fill="dark red",alpha=0.3) +
geom_ribbon(data=AIS_rates,aes(x=t+2004,ymin=cum-cum_std,ymax = cum+cum_std),fill="black",alpha=0.3) +
geom_line(data=subset(IMBIE_AIS,Year >= 2003 & Year <= 2010),aes(x=Year,y=Cum_GT),colour="dark red")+
geom_line(data=AIS_rates,aes(x=t+2004,y=cum),colour="black") + xlim(c(2004,2010)) + ylab("Cum. mass balance (Gt)")
png(filename=paste0(img_path,"IMBIE_compare.png"),width=2000,height=1100,res=300); print(g_IMBIE);  dev.off()
## Compare to Luthcke
crossbar_plot <- function(df,alpha=0.8,width=1,col="black",g=ggplot()) {
g + geom_crossbar(data=df,aes(x=as.factor(Year),y = GT,ymax=GT+Unc,ymin=GT-Unc),alpha=alpha,fill=col,width=width) +
geom_crossbar(data=df,aes(x=as.factor(Year),y = GT,ymax=GT+2*Unc,ymin=GT-2*Unc),alpha=alpha/2,fill=col,width=width) +
xlab("Year") + ylab("Gt/yr")
}
process_IMBIE_IOM <- function(path) {
df <- read.table(path,header=T,sep=",")
df$Year <- floor(df$Year)
df <- plyr::ddply(df,"Year",function(df) return(data.frame(GT = mean(df$Mean),Unc = mean(df$Std))))
}
Lutchke <- read.table("data/AIS_Data/Luthcke_2013_results.csv",header=T,sep=",")
IMBIE_IOM_WAIS <- process_IMBIE_IOM("data/AIS_Data/imbie_IOM_WAIS.csv")
IMBIE_IOM_EAIS <- process_IMBIE_IOM("data/AIS_Data/imbie_IOM_EAIS.csv")
IMBIE_IOM_AP <- process_IMBIE_IOM("data/AIS_Data/imbie_IOM_AP.csv")
g_WAIS <- crossbar_plot(df=subset(Lutchke,Section=="WAIS"),alpha=0.5,col="green",width=0.6,g=g_all$WAIS)
g_WAIS <- crossbar_plot(df=IMBIE_IOM_WAIS,alpha=0.3,col="pink",width=0.3,g=g_WAIS)+ coord_fixed(ylim=c(-400,200),ratio=0.01)
g_EAIS <- crossbar_plot(df=subset(Lutchke,Section=="EAIS"),alpha=0.5,col="green",width=0.6,g=g_all$EAIS)
g_EAIS <- crossbar_plot(df=IMBIE_IOM_EAIS,alpha=0.5,col="pink",width=0.3,g=g_EAIS)+ coord_fixed(ylim=c(-300,500),ratio=0.01)
g_AP <- crossbar_plot(df=subset(Lutchke,Section=="AP"),alpha=0.5,col="green",width=0.6,g=g_all$AP)
g_AP <- crossbar_plot(df=IMBIE_IOM_AP,alpha=0.5,col="pink",width=0.3,g=g_AP)+ coord_fixed(ratio=0.01)
png(filename=paste0(img_path,"IMBIE_compare_WAIS.png"),width=2000,height=2000,res=300); print(g_WAIS);  dev.off()
png(filename=paste0(img_path,"IMBIE_compare_EAIS.png"),width=2000,height=2000,res=300); print(g_EAIS);  dev.off()
png(filename=paste0(img_path,"IMBIE_compare_AP.png"),width=2000,height=700,res=300); print(g_AP);  dev.off()
help(install_git)
X <- data.frame(x=runif(100),y = runif(100), z = runif(100))
LinePlotTheme() + geom_point(data=X,aes(x,y,colour=z))
X <- data.frame(x=runif(100),y = runif(100), z = runif(100))
X <- data.frame(x=runif(100),y = runif(100), z = runif(100))
EmptyTheme() + geom_point(data=X,aes(x,y,colour=z))
document("./pkg/MVST")
EmptyTheme() + geom_point(data=X,aes(x,y,colour=z))
var_true <- 1
kappa_true <- kappa_from_l(l=1700,nu=2)
X <- data.frame(x = runif(100), y = runif(100))
dd<- fields::rdist(X,X)
K <- my_Matern(r=dd,nu=2,var=var_true,kappa=kappa_true)
X$z <-  t(chol(K)) %*% rnorm(nrow(X))
K
X <- data.frame(x = 3000*runif(100), y = 3000*runif(100))
dd<- fields::rdist(X,X)
K <- my_Matern(r=dd,nu=2,var=var_true,kappa=kappa_true)
X$z <-  t(chol(K)) %*% rnorm(nrow(X))
ggplot(X) + geom_point(aes(x,y,colour=z))
var_marg <- var(X["z"])
var_marg
var_search <- 10^(seq(log10(var_marg/100),log10(var_marg*100),length=100))
rho_search=seq(100,4000,200)
lk_fit <- lscale_from_Matern(X,rho=rho_search,var=var_search,nu=c(2))
lk_fit
print(lk_fir$spat_df)
print(lk_fit$spat_df)
require(Matrix)
data(icesat)
data(surf_fe)
## First create observation object
icesat_obs <- Obs(df=icesat,
abs_lim = 5,
avr_method = "median",
box_size=100,
name="icesat")
## Now create GMRF defined over some FE basis
Mesh <- initFEbasis(p=surf_fe$p,
t=surf_fe$t,
M=surf_fe$M,
K=surf_fe$K)
mu <- matrix(0,nrow(Mesh),1)
Q <- sparseMatrix(i=1:nrow(surf_fe$p), j = 1:nrow(surf_fe$p), x = 1)
my_GMRF <- GMRF(mu = mu, Q = Q,name="SURF",t_axis = 0:6)
SURF <-GMRF_basis(G = my_GMRF, Basis = Mesh)
L1 <- link(SURF,icesat_obs)
e <- link_list(list(L1))
v <- block_list(list(O = icesat_obs, G = SURF))
G <- new("Graph",e=e,v=v)
G_reduced <- compress(G)
mu2 <- matrix(1,nrow(Mesh),1)
my_GMRF2 <- GMRF(mu = mu2, Q = Q,name="SURF",t_axis = 0:6)
G_reduced <- setGMRF(G_reduced, obj = my_GMRF2)
G_reduced@v[[1]]@mu
document("./pkg/MVST",clean=T)
source('C:/Users/ggazm/Dropbox/CurrentProjects/PostDoc Bristol/R Code/AIS_ST_Study_postMCMC.R')
document("./pkg/MVST",clean=T)
library(devtools)
document("./pkg/MVST",clean=T)
library(devtools)
install_git("https://github.com/andrewzm/MVST",dependencies=T)
install("./pkg/MVST")
install("./pkg/MVST",build_vignettes=F)
library(MVST)
library(devtools)
install_git("https://github.com/andrewzm/MVST",dependencies=T,build_vignettes=F)
install_git("https://github.com/andrewzm/MVST",dependencies=T,build_vignettes=F)
install_git("https://github.com/andrewzm/MVST",dependencies=T,build_vignettes=F)
document("./pkg/MVST")
document("./pkg/MVST",clean=T)
library(devtools)
install_git("https://github.com/andrewzm/MVST",dependencies=T,build_vignettes=F)
install_git("https://github.com/andrewzm/MVST",dependencies=T,build_vignettes=F)
??as.spam.dgCMatrix
build("./pkg/MVST")
build("./pkg/MVST",build_vignettes=F)
build("./pkg/MVST",build_vignettes=0)
library(devtools)
build("./pkg/MVST",build_vignettes=0)
build("./pkg/MVST")
install.packages("MVST_1.0.tar.gz",type="source")
version
load_all("./pkg/MVST")
library(devtools)
load_all("./pkg/MVST")
md5_wrapper <- md5_cache("~/cache2/")
shapefiles <-   md5_wrapper(Load_data,grounding_sub = "./data/AIS_Data/Coastline/moa_groundingline.shp",
coast_sub = "./data/AIS_Data/Coastline/moa_coastline.shp",
Islands = "./data/AIS_Data/Coastline/all_islands_header.txt",
thinning = 100,
convert_m_to_km = T)
md5_wrapper <- md5_cache("~/cache3/")
shapefiles <-   md5_wrapper(Load_data,grounding_sub = "./data/AIS_Data/Coastline/moa_groundingline.shp",
coast_sub = "./data/AIS_Data/Coastline/moa_coastline.shp",
Islands = "./data/AIS_Data/Coastline/all_islands_header.txt",
thinning = 100,
convert_m_to_km = T)
shapefiles <-   md5_wrapper(Load_data,grounding_sub = "./data/AIS_Data/Coastline/moa_groundingline.shp",
coast_sub = "./data/AIS_Data/Coastline/moa_coastline.shp",
Islands = "./data/AIS_Data/Coastline/all_islands_header.txt",
thinning = 100,
convert_m_to_km = T)
load_all("./pkg/MVST")
shapefiles <-   md5_wrapper(Load_data,grounding_sub = "./data/AIS_Data/Coastline/moa_groundingline.shp",
coast_sub = "./data/AIS_Data/Coastline/moa_coastline.shp",
Islands = "./data/AIS_Data/Coastline/all_islands_header.txt",
thinning = 100,
convert_m_to_km = T)
path = "~/cache/"
file.path(path,paste0(md5,".rda"))
file.path(path,paste0("xxx",".rda"))
exists(file.path(path,paste0("xxx",".rda")))
load_all("./pkg/MVST")
md5_wrapper <- md5_cache("~/cache4/")
### Load data sets (names of data fields are important for assigning in-land/coast etc.)
shapefiles <-   md5_wrapper(Load_data,grounding_sub = "./data/AIS_Data/Coastline/moa_groundingline.shp",
coast_sub = "./data/AIS_Data/Coastline/moa_coastline.shp",
Islands = "./data/AIS_Data/Coastline/all_islands_header.txt",
thinning = 100,
convert_m_to_km = T)
file.path("xx","ttt")
file.path("xx/","ttt")
icesat
load("./pkg/MVST/data/icesat.rda")
icesat
head(icesat)
icesat <- subset(icesat,select=c("x","y","t","z","std")
)
head(icesat)
save(icesat,file="./pkg/MVST/data/icesat.rda")
pwd
getwd()
setwd("./pkg/MVST/vignettes/")
getwd(0
getwd()
build_vignettes("..")
